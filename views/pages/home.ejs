<!DOCTYPE html>
<html>
	<head>
	<meta name="viewport" content="width=device-width, user-scalable=no"/>
	<title> Create New Set </title>
	<link type="text/css" rel="stylesheet" href="/stylesheets/flashcardApp.css">
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" crossorigin="anonymous">
	<script> 
			document.addEventListener('DOMContentLoaded', () => {
				//Sample data that I am using to test the flash card with
				//import {sampleData} from '/sampleData.js';

				/* The 4 variables below are queried to their respective element tags,
				 * the previousButton/nextButton variables are used to iterate back
				 * and forth between each set of key/value pairs within the JSON data
				 * that is being used, the frontCard/backCard variables represent the 
				 * data being displayed on the front/back card <h1> elements 
				 */
				var query = {
					previousButton: document.querySelector(".previousButton-home"),
					nextButton: document.querySelector(".nextButton-home"),
					frontCard: document.querySelector(".frontCard-home"),
					backCard: document.querySelector(".backCard-home")
				};

				/* I use arrayCount as my main iterator in order to go through the 
				 * keyValue_array array, which is a 2D array containing the keys from
				 * sampleData represented as key_data, and the values from sampleData
				 * represented as value_data
				 */

				var homeData = {
					term0: 'Your first term example here',
					definition0: 'You flipped the card, nice! Here is the first definition',
					term1: 'Your second term example here',
					definition1: "You're getting the hang of this! Here is the second definition.",
					terms: function() {
						let termArray = [];
						termArray.push(this.term0);
						termArray.push(this.term1);
						return termArray;
					},
					definitions: function() {
						let defArray = [];
						defArray.push(this.definition0);
						defArray.push(this.definition1);
						return defArray;
					},
					keyValue_array: [],
					arrayCount: 0
				};

				console.log(homeData.terms());
				console.log(homeData.definitions());

				document.getElementById('sendButton-home').addEventListener('click', function sendClick() {
						console.log('Example data submitted');
						homeData.term0 = document.getElementById('term0').value;
						homeData.definition0 = document.getElementById('definition0').value;
						homeData.term1 = document.getElementById('term1').value;
						homeData.definition1 = document.getElementById('definition1').value;
						homeData.keyValue_array = [];
						console.log(createCardArray(homeData.terms(), homeData.definitions()));

						query.frontCard.textContent = homeData.keyValue_array[0][0];
						query.backCard.textContent = homeData.keyValue_array[0][1];
				});

				/* The below I was using as tests previously
				 * console.log(key_data);
				 * console.log(value_data);
				 *
				 * for(let key in sampleData) {
				 * 	   console.log("Key name: " + key);
				 *	   console.log("Key's value: " + sampleData[key]);
				 * }
				 *
				 * console.log(createCardArray(key_data, value_data));
				*/

				function createCardArray(key, value) {
					for(let i = 0; i < key.length; i++) {
						let tempArray = [];
						tempArray.push(key[i]);
						tempArray.push(value[i]);

						homeData.keyValue_array.push(tempArray);
				}
				return homeData.keyValue_array;
				}

				document.querySelector('.flip-container-home').addEventListener('click', function clickCard() {
					document.querySelector('.flip-container-home').classList.toggle('hover');
				}, false);

				console.log(createCardArray(homeData.terms(), homeData.definitions()));

				query.frontCard.textContent = homeData.keyValue_array[0][0];
				query.backCard.textContent = homeData.keyValue_array[0][1];

				document.querySelector('.cardButtons-home').addEventListener('click', (event) => {
					var target = event.target;
					console.log(target);
					if(target.id === 'previousButton-home') {
						if(homeData.arrayCount == 0) {
							homeData.arrayCount = 0;
							console.log(homeData.arrayCount);
						} else {
							homeData.arrayCount--;
							console.log(homeData.arrayCount);
							query.frontCard.textContent = homeData.keyValue_array[homeData.arrayCount][0];
							query.backCard.textContent = homeData.keyValue_array[homeData.arrayCount][1];
						}
						
					} else if(target.id === 'nextButton-home') {
						/* Take not of line 83 and the second test statement within the if statement
						console.log(arrayCount);
						console.log(keyValue_array[key_data.length -1][1]);
						console.log(backCard.textContent);
						*/
						if(homeData.arrayCount == homeData.keyValue_array.length - 1) {
							homeData.arrayCount == homeData.keyValue_array.length - 1;
							console.log(homeData.arrayCount);
						} else {
							homeData.arrayCount++;
							query.frontCard.textContent = homeData.keyValue_array[homeData.arrayCount][0];
							query.backCard.textContent = homeData.keyValue_array[homeData.arrayCount][1];
							console.log(homeData.arrayCount);
						}
					} else {
						console.log("You've reached an error, check out your code");
					}
				}, false);
			});
		</script>
	<script>
		document.addEventListener('DOMContentLoaded', () => {
			function hasClass(element, cls) {
				return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > - 1;
			}

			document.querySelector('.home-logOn-div-bottom').addEventListener('click', function() {
				if(!(hasClass(document.querySelector('.register-bar'), 'register-bar-show'))) {
					console.log('opening register bar');
					document.querySelector('.register-bar').classList.add('register-bar-show');
				} else {
					console.log('closing register bar');
					document.querySelector('.register-bar').classList.remove('register-bar-show');
				}
			});
		});
	</script>
	<!-- <script type="module" src="ajaxDoc.js" async> </script> -->
</head>
<body>
	<div class="home-container">
		<div class="inner-container-0">
			<div class="keyline-home-0"></div>
			<header class="headerActivityPage-home">
				<div class="nameOfSite">
					<a class="nameOfSite-a" href="/flashHome"> 
						<h1 class="nameOfSite-h1"> FlashPass </h1>
					</a>
				</div>
				<div class="newSets-navBar">
					<div class="login-signUp">
						<a class="login-a" href="">
							<h3 class="inner-login">
								Login
							</h3>
						</a>
						<a class="signUp-a" href="">
							<h3 class="inner-signUp">
								Sign up
							</h3>
						</a>
					</div>
				</div>
			</header>
			<div class="keyline-home-1"></div>	
			<img class="first-img" src="/images/IMG_0945.JPG" alt="Tam background with cargo ship"/>
			<div class="home-img-div">
				<h2 class="home-img-text">
					Effortless UI design <br> granting learners a peaceful <br> approach to studying.
				</h2>
				<div class="home-img-separator">
				</div>
				<h3 class="home-img-text2">
					Generate flashcard sets of your own accord <br> or discover heplful sets from others.
				</h3>
			</div>	
		</div>
		<figure class="inner-container-1">
			<img class="second-img" src="/images/IMG_0121.JPG" alt="SF Pink Flower"/>
			<figcaption class="home-logOn-explain-div">
				<h3 class="home-logOn-register">
					Using the built-in study interface of FlashPass, <br> studying is made easy.
				</h3>
				<div class="home-img-separator">
				</div>
			</figcaption>
			<figcaption class="home-logOn-explain-div-1">
				<h3 class="home-logOn-explain-1">
					Imagine, create, practice.. <br> The potential is limitless. <br> Take learning into your own hands !
				</h3>
			</figcaption>
		</figure>
		<div class="inner-container-2">
			<div class="home-logOn-div">
				<h3 class="home-logOn-register">
					 The build process of a new set <br> is designed to be swift. <br> Check out an example below !
				</h3>
			</div>
			<div class="home-term-explain-div-1">
				<h3 class="home-logOn-explain-1">
					Whether you're trying to learn new vocabulary, <br> study information for an upcoming exam, <br> or practice new concepts for personal benefit, <br> FlashPass makes organization trouble-free.
				</h3>
			</div>
			<div class="home-img-separator">
			</div>
			<div class="newCard-home" id="newCard">
				<div class="Term-Definition-home">
					<div class="Term-home">
						<input id="term0" class="newCard-Term-home" type="text" name="term0" placeholder="Term"/>
						<h3 class="Term-h3-home"> Term </h3>
					</div>
					<div class="Definition-home">
						<input id="definition0" class="newCard-Definition-home" type="text" name="definition0" placeholder="Definition"/>
						<h3 class="Definition-h3-home"> Definition </h3>
					</div>
				</div>
			</div>
			<div class="newCard-home" id="newCard">
				<div class="Term-Definition-home">
					<div class="Term-home">
						<input id="term1" class="newCard-Term-home" type="text" name="term1" placeholder="Term"/>
						<h3 class="Term-h3-home"> Term </h3>
					</div>
					<div class="Definition-home">
						<input id="definition1" class="newCard-Definition-home" type="text" name="definition1" placeholder="Definition"/>
						<h3 class="Definition-h3-home"> Definition </h3>
					</div>
				</div>
			</div>
			<div class="sendButton-home">
					<h3 id="sendButton-home"> Submit </h3>
			</div>
			<div class="home-img-separator">
			</div>
			<div class="flip-container-home">
				<div class="flipper-home">
					<div class="front-home">
						<h1 class="frontCard-home"> Your example term here </h1>
					</div>
					<div class="back-home">
						<h1 class="backCard-home"> Your example definition here </h1>
					</div>
				</div>
			</div>
			<div id="cardButtons" class="cardButtons-home">
					<button id="previousButton-home" class="previousButton-home"> <i id="previousButton-home" class="fas fa-chevron-left"></i> </button>
					<button id="nextButton-home" class="nextButton-home"> <i id="nextButton-home" class="fas fa-chevron-right"></i> </button>
			</div>
		</div>
		<figure class="inner-container-3">
			<div class="home-logOn-div-bottom">
				<h3 class="home-logOn-register">
					Sign up for a free account today !
				</h3>
			</div>
			<img class="third-img" src="/images/IMG_3138.JPG" alt="SF Pink Flower"/>
			<figcaption class="register-bar">
				<form class="register-form">
					<input id="register-email" class="register-email" type="text" name="email" placeholder="Email"/>
					<input id="register-user" class="register-user" type="text" name="username" placeholder="Username"/>
					<input id="register-pass" class="register-pass" type="text" name="password" placeholder="Password"/>
					<input id="register-passConf" class="register-passConf" type="text" name="passwordConf" placeholder="Confirm password"/>
					<input id="register-submit" class="register-submit" type="submit" placeholder="Email"/>
				</form>
			</figcaption>
		</figure>
		<footer class="footer-home">
		</footer>
	</div>
</body>
</html>

<!-- 
<div class="home-logOn-explain-div">
				<h3 class="home-logOn-register">
					The built-in study interface of FlashPass <br> engages the brain effectively <br> through the facilitation of repetition.
				</h3>
			</div>
			<div class="home-logOn-div">
				<h3 class="home-logOn-register">
					Use repetition to your advantage <br> as it trains our metacognitive ability to ask questions that aid in our ability to reason <br> and think critically.
				</h3>
			</div>
		-->
